class GameBoard {
    field Array board;
    field Array savedState;
    field int numBoxes;
    field int numRows;
    field int numCols;
    field int topRow;
    field int leftCol;
    field int correctlyPlacedBoxes;
    field int initialCorrectBoxes;
    field int playerStartRow;
    field int playerStartCol;
    field int size;

    constructor GameBoard new(int rows, int cols, int correctBoxes,
            int totalBoxes) {
        var int cell;
        let cell = 0;
        let numCols = cols;
        let numRows = rows;
        let numBoxes = totalBoxes;
        let correctlyPlacedBoxes = correctBoxes;
        let initialCorrectBoxes = correctBoxes;
        let size = rows * cols;
        let topRow = 8 - (rows / 2);
        let leftCol = 16 - (cols / 2);
        let board = Array.new(size);
        let savedState = Array.new(size);
        while (cell < size) {
            let board[cell] = 0;
            let cell = cell + 1;
        }
        return this;
    }

    method void dispose() {
        do board.dispose();
        do savedState.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method int get(int row, int col) {
        return board[row * numCols + col];
    }

    method void set(int row, int col, int data) {
        let board[row * numCols + col] = data;
        return;
    }

    method int getNumRows() {
        return numRows;
    }

    method int getNumCols() {
        return numCols;
    }

    method void saveState() {
        var int cell;
        let cell = 0;
        while (cell < size) {
            let savedState[cell] = board[cell];
            let cell = cell + 1;
        }
        return;
    }

    method void loadState() {
        var int cell;
        let cell = 0;
        while (cell < size) {
            let board[cell] = savedState[cell];
            let cell = cell + 1;
        }
        let correctlyPlacedBoxes = initialCorrectBoxes;
        return;
    }

    method void setPlayerStartPos(int row, int col) {
        let playerStartRow = row;
        let playerStartCol = col;
        return;
    }

    method int getPlayerStartRow() {
        return playerStartRow;
    }

    method int getPlayerStartCol() {
        return playerStartCol;
    }

    method int getTopRow() {
        return topRow;
    }

    method int getLeftCol() {
        return leftCol;
    }

    method void pushBoxOntoTarget() {
        let correctlyPlacedBoxes = correctlyPlacedBoxes + 1;
        return;
    }

    method void pushBoxOffTarget() {
        let correctlyPlacedBoxes = correctlyPlacedBoxes - 1;
        return;
    }

    method boolean levelComplete() {
        return correctlyPlacedBoxes = numBoxes;
    }
}

