/*
 * Constants:
 * NUM_ROWS 14
 * NUM_COLS 14
 * SCREEN_START 16384
 * enum TYPES {
 *     EMPTY = 0;
 *     TARGET = 1;
 *     BOX = 2;
 *     BOX_ON_TARGET = 3;
 *     WALL = 4;
 * }
 */

class Sokoban {
    field int level;
    field GameBoard board;
    field int playerCol;
    field int playerRow;

    constructor Sokoban init() {
        return this;
    }
    
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method void titleScreen() {
        do Screen.clearScreen();
        do Output.moveCursor(8, 28);
        do Output.printString("SOKOBAN");
        do Output.moveCursor(12, 26);
        do Output.printString("R to restart");
        do Output.moveCursor(13, 27);
        do Output.printString("Q to quit");
        do Output.moveCursor(16, 18);
        do Output.printString("press any key to continue...");
        do Output.moveCursor(20, 26);
        do Output.printString("Quinn Yockey");
        do Output.moveCursor(21, 25);
        do Output.printString("December 2023");
        while (~Keyboard.keyPressed()) {}
        do Memory.poke(24576, 0);
        do Screen.clearScreen();
        return;
    }

    method void playLevel(int levelNum, GameBoard levelBoard) {
        let level = levelNum;
        let board = levelBoard;
        let playerRow = levelBoard.getPlayerStartRow();
        let playerCol = levelBoard.getPlayerStartCol();
        do board.saveState();
        do Graphics.drawBoard(board);
        do Graphics.drawPlayer(playerRow, playerCol);
        do run();
        do Sys.wait(1000);
        do Screen.clearScreen();
        return;
    }

    method void run() {
        var int key;
        var int newRow;
        var int newCol;
        while (~board.levelComplete()) {
            let key = 0;
            while (key = 0) {
                let key = Keyboard.keyPressed();
            }
            do Memory.poke(24576, 0);
            if ((key > 129) & (key < 134)) {
                if ((key = 130) | (key = 132)) {
                    let newRow = playerRow;
                    let newCol = playerCol + key - 131;
                } else {
                    let newRow = playerRow + key - 132;
                    let newCol = playerCol;
                }
                do move(playerRow, playerCol, newRow, newCol);
            } else { if (key = 81) { // Q
                do Sys.halt();
            } else { if (key = 82) { // R
                let playerRow = board.getPlayerStartRow();
                let playerCol = board.getPlayerStartCol();
                do board.loadState();
                do Screen.clearScreen();
                do Graphics.drawBoard(board);
                do Graphics.drawPlayer(playerRow, playerCol);
            }}}
        }
        return;
    }

    method void move(int oldRow, int oldCol, int newRow, int newCol) {
        var int newCellContents;
        var int oldCellContents;
        var int boxPushCellContents;
        var int boxPushCellRow;
        var int boxPushCellCol;
        var boolean canMove;
        let oldCellContents = board.get(oldRow, oldCol);
        let newCellContents = board.get(newRow, newCol);
        if (newCellContents < 2) { // empty or target
            let canMove = true;
        } else { if (newCellContents < 4) { // box or box on target
            let boxPushCellRow = newRow + newRow - oldRow;
            let boxPushCellCol = newCol + newCol - oldCol;
            let boxPushCellContents = board.get(boxPushCellRow,
                    boxPushCellCol);
            let canMove = boxPushCellContents < 2;
            if (canMove) {
                do Graphics.drawBox(boxPushCellRow, boxPushCellCol);
                do board.set(newRow, newCol, newCellContents - 2);
                if (boxPushCellContents = 1) { // pushing onto target
                    do Graphics.drawBoxOnTarget(boxPushCellRow, boxPushCellCol);
                    if (newCellContents = 2) { // pushing from empty space
                        do board.pushBoxOntoTarget();
                    }
                    if (board.levelComplete()) {
                        do Output.moveCursor(3, 24);
                        do Output.printString("Level ");
                        do Output.printInt(level);
                        do Output.printString(" Complete!");
                        let level = level + 1;
                    }
                } else { // pushing to non-target cell
                    do Graphics.drawBox(boxPushCellRow, boxPushCellCol);
                    if (newCellContents = 3) { // pushing off of target
                        do board.pushBoxOffTarget();
                    }
                }
                do board.set(boxPushCellRow, boxPushCellCol,
                        boxPushCellContents + 2);
            }
        } else { // wall
            let canMove = false;
        }}
        if (canMove) {
            let playerRow = newRow;
            let playerCol = newCol;
            if (oldCellContents = 1) {
                do Graphics.drawTarget(oldRow, oldCol);
            } else {
                do Graphics.erase(oldRow, oldCol);
            }
            do Graphics.drawPlayer(playerRow, playerCol);
        }
        return;
    }

}

