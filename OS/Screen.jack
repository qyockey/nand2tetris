// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let color = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int block;
        let block = 16384;
        while (block < 24576) {
            do Memory.poke(block, 0);
            let block = block + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, horizontalBlock, toggleBit;
        let horizontalBlock = x / 16;
        let toggleBit = Math.twoToThe(x - (16 * horizontalBlock));
        let address = 16384 + (y * 32) + horizontalBlock;
        if (color) {
            let address[0] = address[0] | toggleBit;
        } else {
            let address[0] = address[0] & ~toggleBit;
        }
        return;
    }

    function void drawHorizontal(int x1, int x2, int y, int address) {
        var int leftEnd, rightEnd;
        let leftEnd = -Math.twoToThe(x1 & 15);
        let rightEnd = Math.twoToThe((x2 & 15) + 1) - 1;
        if ((x1 + 16 > x2) & ~((x2 & 15) < (x1 & 15))) {
            if (color) {
                do Memory.poke(address, (leftEnd & rightEnd)
                        | Memory.peek(address));
            } else {
                do Memory.poke(address, ~(leftEnd & rightEnd)
                        & Memory.peek(address));
            }
            return;
        }
        let x1 = x1 + 16;
        if (color) {
            do Memory.poke(address, leftEnd | Memory.peek(address));
            let x1 = x1 + 16 - (x1 & 15);
            let x2 = x2 - (x2 & 15) + 1;
            let address = address + 1;
            while (x1 < x2) {
                do Memory.poke(address, -1);
                let x1 = x1 + 16;
                let address = address + 1;
            }
            do Memory.poke(address, rightEnd | Memory.peek(address));
        } else {
            do Memory.poke(address, (~leftEnd) & Memory.peek(address));
            let x1 = x1 + 16 - (x1 & 15);
            let x2 = x2 - (x2 & 15) + 1;
            let address = address + 1;
            while (x1 < x2) {
                do Memory.poke(address, 0);
                let x1 = x1 + 16;
                let address = address + 1;
            }
            do Memory.poke(address, (~rightEnd) & Memory.peek(address));
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, dyAbs, diff, incX, incY, temp;
        if (y1 < y2) {
            let incY = 1;
        } else {
            let incY = -1;
        }
        if (x2 < x1) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
            let incY = -incY;
        } else {
            // vertical
            if (x1 = x2) {
                while (~(y1 = y2)) {
                    do Screen.drawPixel(x1, y1);
                    let y1 = y1 + incY;
                }
                do Screen.drawPixel(x2, y2);
                return;
            }
        }
        let dy = y2 - y1;
        if (dy = 0) {
            do Screen.drawHorizontal(x1, x2, y1, 16384 + (y1 * 32) + (x1 / 16));
            return;
        }
        let dyAbs = Math.abs(dy);
        let dx = x2 - x1;
        if (Math.abs(dx) > dyAbs) {
            // move horizontally
            let x1 = x1 + 1;
            let diff = diff + dyAbs;
        } else {
            // move vertically
            let y1 = y1 + incY;
            let diff = diff - dx;
        }
        do Screen.drawPixel(x1, y1);
        while (~((x1 = x2) | (y1 = y2))) {
            if (diff < 0) {
                // move horizontally
                let x1 = x1 + 1;
                let diff = diff + dyAbs;
            } else {
                // move vertically
                let y1 = y1 + incY;
                let diff = diff - dx;
            }
            do Screen.drawPixel(x1, y1);
        }
        do Screen.drawPixel(x2, y2);
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int lineAddress;
        let lineAddress = 16384 + (y1 * 32) + (x1 / 16);
        let y2 = y2 + 1;
        while (y1 < y2) {
            do Screen.drawHorizontal(x1, x2, y1, lineAddress);
            let lineAddress = lineAddress + 32;
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy, lowY, highY, leftX, rightX, radiusSquared,
                dySquared, address;
        let dy = 0;
        let dySquared = 0;
        let radiusSquared = r * r;
        while (~(dy > r)) {
            let dx = Math.sqrt(radiusSquared - dySquared);
            let leftX = x - dx;
            let rightX = x + dx;
            let lowY = y + dy;
            let highY = y - dy;
            let address = 16384 + (highY * 32) + (leftX / 16);
            do Screen.drawHorizontal(leftX, rightX, highY, address);
            do Screen.drawHorizontal(leftX, rightX, lowY, address + (64 * dy));
            let dySquared = dySquared + dy + dy + 1;
            let dy = dy + 1;
        }
        return;
    }

}

