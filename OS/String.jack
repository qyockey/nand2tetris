// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field int currentLength, maxLength;
    field Array data;
    
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLen) {
        let currentLength = 0;
        let maxLength = maxLen;
        if (maxLen = 0) {
            let data = 0;
        } else {
            let data = Array.new(maxLen);
        }
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return currentLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (j < currentLength) {
            return data[j];
        }
        do Sys.error(1);
        return 0;
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (j < maxLength) {
            let data[j] = c;
        } else {
            do Sys.error(1);
        }
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (currentLength < maxLength) {
            do setCharAt(currentLength, c);
            let currentLength = currentLength + 1;
        } else {
            do Sys.error(1); // fix error code;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (currentLength > 0) {
            let currentLength = currentLength - 1;
            do setCharAt(currentLength, 0);
        } else {
            do Sys.error(1); // fix error code;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int value, index;
        var boolean sign;
        var char c;
        if (charAt(0) = 45) {
            let sign = true;
            let index = 1;
        } else {
            let sign = false;
            let index = 0;
        }
        while (index < currentLength) {
            let c = charAt(index);
            if ((c < 48) | (c > 57)) { // '0' <= c <= '9'
                do Sys.error(1); // fix eror code
            }
            let value = (10 * value) + (c - 48);
            let index = index + 1;
        }
        if (sign) {
            return -value;
        }
        return value;
    }

    method void appendInt(int val) {
        var int shiftedVal;
        if (val < 0) {
            do appendChar(45);
            let val = -val;
        }
        if (val < 10) {
            do appendChar(48 + val);
            return;
        }
        let shiftedVal = val / 10;
        do appendInt(shiftedVal);
        do appendChar(48 + val - (10 * shiftedVal));
        return;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let currentLength = 0;
        do appendInt(val);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}

