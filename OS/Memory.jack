// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {

    static Array freeList;
    static int freeListTail;

    /** Initializes the class. */
    function void init() {
        let freeList = 2048;
        let freeListTail = 2048;
        let freeList[0] = 0;
        let freeList[1] = 14336;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return address[0];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let address[0] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int freeNode, nodeSize, remainder;
        let size = size + 2;
        let freeNode = freeList;
        while (freeNode > 0) {
            let nodeSize = freeNode[1];
            if (~(nodeSize < size)) {
                let remainder = freeNode + size;
                let remainder[0] = freeNode[0];
                let remainder[1] = nodeSize - size;
                let freeNode[0] = 0;
                let freeNode[1] = size - 2;
                if (freeListTail = freeList) {
                    let freeListTail = remainder;
                }
                let freeList = remainder;
                return freeNode + 2;
            }
            let freeNode = freeNode[0];
        }
        // do Sys.error(1); // update to correct code
        return -1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array object) {
        let object = object - 2;
        let freeListTail[0] = object;
        let freeListTail = object;
        return;
    }
}

